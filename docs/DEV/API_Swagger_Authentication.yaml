openapi: "3.0.3"
info:
  ti```yaml
openapi: "3.0.3"
info:
  title: "Authentication API"
  description: "API for user authentication, registration, and password management."
  version: "1.0.0"
servers:
  - url: "https://localhost:44300"
    description: "Local Development Server"
paths:
  /api/app/authentication/register:
    post:
      summary: "Registers a new user account."
      operationId: "register"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/RegisterDto"
      responses:
        "200":
          description: "User registered successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AppUserDto"
        "400":
          description: "Bad Request - Invalid input or email already exists."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TBDErrorResponse"
  /api/app/authentication/login:
    post:
      summary: "Authenticates a user and returns authentication tokens."
      operationId: "login"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginDto"
      responses:
        "200":
          description: "User logged in successfully."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/LoginResponseDto"
        "401":
          description: "Unauthorized - Invalid credentials."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TBDErrorResponse"
  /api/app/authentication/request-password-reset:
    post:
      summary: "Requests a password reset link for a user."
      operationId: "requestPasswordReset"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/PasswordResetRequestDto"
      responses:
        "200":
          description: "Password reset request processed. Check email for instructions."
        "400":
          description: "Bad Request - Invalid email format."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TBDErrorResponse"
  /api/app/authentication/reset-password:
    post:
      summary: "Resets the user's password using a valid reset token."
      operationId: "resetPassword"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordDto"
      responses:
        "200":
          description: "Password reset successfully."
        "400":
          description: "Bad Request - Invalid token or password does not meet requirements."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TBDErrorResponse"
        "404":
          description: "Not Found - Token not found or expired."
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TBDErrorResponse"
components:
  schemas:
    RegisterDto:
      type: "object"
      properties:
        email:
          type: "string"
          format: "email"
          description: "User's email address."
          example: "user@example.com"
        password:
          type: "string"
          format: "password"
          description: "User's password (min 8 characters, at least one uppercase, one lowercase, one number)."
          minLength: 8
          maxLength: 100
          pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$"
        confirmPassword:
          type: "string"
          format: "password"
          description: "Confirmation of the user's password."
      required:
        - "email"
        - "password"
        - "confirmPassword"
    LoginDto:
      type: "object"
      properties:
        email:
          type: "string"
          format: "email"
          description: "User's email address."
          example: "user@example.com"
        password:
          type: "string"
          format: "password"
          description: "User's password."
      required:
        - "email"
        - "password"
    LoginResponseDto:
      type: "object"
      properties:
        accessToken:
          type: "string"
          description: "JWT access token."
        expiresIn:
          type: "integer"
          format: "int32"
          description: "Token expiration time in seconds."
        tokenType:
          type: "string"
          description: "Type of the token (e.g., Bearer)."
        refreshToken:
          type: "string"
          description: "Refresh token."
      required:
        - "accessToken"
        - "expiresIn"
        - "tokenType"
        - "refreshToken"
    PasswordResetRequestDto:
      type: "object"
      properties:
        email:
          type: "string"
          format: "email"
          description: "Email address of the user requesting password reset."
          example: "user@example.com"
      required:
        - "email"
    ResetPasswordDto:
      type: "object"
      properties:
        userId:
          type: "string"
          format: "uuid"
          description: "ID of the user."
        resetToken:
          type: "string"
          description: "The password reset token received via email."
        newPassword:
          type: "string"
          format: "password"
          description: "The new password (min 8 characters, at least one uppercase, one lowercase, one number)."
          minLength: 8
          maxLength: 100
          pattern: "^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d).{8,}$"
        confirmNewPassword:
          type: "string"
          format: "password"
          description: "Confirmation of the new password."
      required:
        - "userId"
        - "resetToken"
        - "newPassword"
        - "confirmNewPassword"
    AppUserDto:
      type: "object"
      properties:
        id:
          type: "string"
          format: "uuid"
          description: "User ID."
        userName:
          type: "string"
          description: "User's username."
        email:
          type: "string"
          format: "email"
          description: "User's email address."
        name:
          type: "string"
          description: "User's first name."
        surname:
          type: "string"
          description: "User's last name."
      required:
        - "id"
        - "userName"
        - "email"
    TBDErrorResponse:
      type: "object"
      properties:
        code:
          type: "string"
          description: "Error code."
        message:
          type: "string"
          description: "Error message."
      required:
        - "code"
        - "message"
  securitySchemes:
    bearerAuth:
      type: "http"
      scheme: "bearer"
      bearerFormat: "JWT"
security:
  - bearerAuth: []

```

